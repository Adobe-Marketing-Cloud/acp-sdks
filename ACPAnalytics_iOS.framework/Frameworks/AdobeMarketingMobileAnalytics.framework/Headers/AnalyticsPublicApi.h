/* **************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

#ifndef ADOBEMOBILE_ANALYTICS_PUBLICAPI_H
#define ADOBEMOBILE_ANALYTICS_PUBLICAPI_H
#include <stdio.h>

namespace AdobeMarketingMobile {

    class AnalyticsPublicApi : public Object {

    public:

        static std::shared_ptr<AnalyticsPublicApi> Create(const std::shared_ptr<EventHub>& hub,
                const std::shared_ptr<PlatformServicesInterface>& services);

        AnalyticsPublicApi();

        void RegisterAnalytics();

        ///@}

        /**
         * @name Analytics
         */
        ///@{

        /**
         * @brief Initiates a track action/state request event.
         *
         * @param analytics_data EventData containing analytics track data
         */
        void AnalyticsTrack(const std::shared_ptr<EventData>& analytics_data) const;

        /**
         * @brief Retrieves identifier generated by analytics for this app/device instance
         *
         * @param callback that will be called when the aid is retrieved from the server or the computation is done
         */
        void AnalyticsGetTrackingIdentifier(const std::function<void(const std::string&)>& callback) const;

        /**
         * @brief Returns the total number of hits currently in the queue in the callback
         *
         * @param callback {@code AdobeCallback<Long>} callback invoked with the queue size
         */
        void AnalyticsGetQueueSize(const std::function<void(const int64_t)>& callback) const;

        /**
         * @brief Removes all unsent hits from the queue
         */
        void AnalyticsClearQueue() const;

        /**
         * @brief Creates a new analytics request event for sending all queued hits
         */
        void AnalyticsSendQueuedHits() const;


    private:

        std::shared_ptr<EventHub> event_hub_;

        std::shared_ptr<PlatformServicesInterface> platform_services_;

    };

}

#endif /* ADOBEMOBILE_ANALYTICS_PUBLICAPI_H */
